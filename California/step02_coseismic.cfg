[pylithapp.metadata]
# Materials
#   The 'wedge' and 'crust' blocks use the the linear, isotropic
#   elastic material model, whereas the 'slab' and 'mantle' use the
#   linear Maxwell viscoelastic material model (mat_viscoelastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   Uniform oblique slip on the slab_top fault rupture patch.
#
base = [pylithapp.cfg, mat_viscoelastic.cfg]
description = Postseismic viscoelastic relaxation from coseismic slip on a patch in the middle of the top of the slab.
keywords = [prescribed slip, coseismic slip]
arguments = [step02_coseismic.cfg, mat_viscoelastic.cfg]
version = 2.0.0

features = [
    Quasi-static simulation,
    pylith.faults.KinSrcStep
    ]

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step02_coseismic-parameters.json
problem.progress_monitor.filename = output/step02_coseismic-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step02_coseismic

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Define the total time for the simulation, the start time, and the
# initial time step size.
initial_dt = 10.0*year
start_time = -10.0*year
end_time = 200.0*year

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the discretization for each of the solution subfields.
#
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1
lagrange_fault.basis_order = 1

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the slab fault patch.
interfaces = [fault_slabtop]

[pylithapp.problem.interfaces.fault_slabtop]
# The `label` corresponds to the name of the nodeset in the Cubit journal file.
# Out fault patch has edges buried in the domain, so we need to specify the buried
# using the `edge` properties, which corresponds to the name of the corresponding
# nodeset in the Cubit journal file
label = fault
label_value = 103
edge_value = 111 

observers.observer.data_fields = [slip]

# We prescribe uniform slip, so we use ia `UniformDB`.
# The earthquake rupture occurs at t=10 years.
[pylithapp.problem.interfaces.fault_slabtop.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Coseismic slip
db_auxiliary_field.values = [final_slip_left_lateral, final_slip_reverse, final_slip_opening, initiation_time]
db_auxiliary_field.data = [-1.0*m, 0.0*m, 0.0*m, 9.999*year ]


# ----------------------------------------------------------------------
# petsc
# ----------------------------------------------------------------------
# Use PETSc parallel solver options for better performance
[pylithapp.problem.petsc_defaults]
parallel = False


# End of file
