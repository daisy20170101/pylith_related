[pylithapp.metadata]
# Materials
#   The 'wedge' and 'crust' blocks use the the linear, isotropic
#   elastic material model, whereas the 'slab' and 'mantle' use the
#   linear Maxwell viscoelastic material model (mat_viscoelastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   Uniform oblique slip on the slab_top fault rupture patch.
#
base = [pylithapp.cfg, mat_viscoelastic.cfg]
description = Postseismic viscoelastic relaxation from coseismic slip on a patch in the middle of the top of the slab.
keywords = [prescribed slip, coseismic slip]
arguments = [step02_coseismic.cfg, mat_viscoelastic.cfg]
version = 2.0.0

features = [
    Quasi-static simulation,
    pylith.faults.KinSrcStep,
    pylith.faults.KinSrcConstRate
    ]

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step03_interseismic-parameters.json
problem.progress_monitor.filename = output/step03_interseismic-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step03_coseismic

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Define the total time for the simulation, the start time, and the
# initial time step size.
initial_dt = 10.0*year
start_time = -10.0*year
end_time = 200.0*year

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the discretization for each of the solution subfields.
#
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1
lagrange_fault.basis_order = 1

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the slab fault patch.
interfaces = [fault]

[pylithapp.problem.interfaces.fault]
# The `label` corresponds to the name of the nodeset in the Cubit journal file.
# Out fault patch has edges buried in the domain, so we need to specify the buried
# using the `edge` properties, which corresponds to the name of the corresponding
# nodeset in the Cubit journal file
label = fault
edge = fault_edge
#ref_dir_1 = [-0.05, 0.95, 0.0]

observers.observer.data_fields = []

eq_ruptures.rupture = pylith.faults.KinSrcConstRate
# We prescribe uniform slip, so we use ia `UniformDB`.
# The earthquake rupture occurs at t=10 years.
[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Coseismic slip
db_auxiliary_field.values = [slip_rate_left_lateral, slip_rate_reverse, slip_rate_opening, initiation_time]
db_auxiliary_field.data = [4.0*cm/year, 0.00*cm/year, 0.0*cm/year, 0.0*year ]


# ----------------------------------------------------------------------
# petsc
# ----------------------------------------------------------------------
# Use PETSc parallel solver options for better performance
[pylithapp.problem.petsc_defaults]
parallel =True 

[pylithapp.petsc]
# Linear solver tolerances
ksp_rtol = 5.0e-7
ksp_atol = 5.0e-7
# Nonlinear solver tolerances
ksp_max_it = 5000
#ksp_converged_reason = true

snes_rtol = 5.0e-7
snes_atol = 5.0e-7
snes_max_it = 5000 
#ksp_gmres_restart = 50 ; Restart orthogonalization in GMRES after this number of iterations
# Linear solver monitoring options.
#ksp_monitor = true ; Show residual norm at each iteration
##ksp_view = true ; Show solver parameters (commented out)
#ksp_converged_reason = true #; Show reason linear solve converged
#ksp_error_if_not_converged = true ; Generate an error if linear solve fails to converge
# Nonlinear solver monitoring options.
#snes_rtol = 1.0e-12 # ; Converge if nonlinear residual norm decreases by this amount
#snes_atol = 1.0e-12 # ; Converge if nonlinear residual norm drops below this value
#snes_max_it = 500 # ; Maximum number of iterations in nonlinear solve
#snes_monitor = true ; Show nonlinear residual norm at each iteration
#snes_linesearch_monitor = true ; Show nonlinear solver line search information
#snes_view = true ; Show nonlinear solver parameters (commented out)
#snes_converged_reason = true #; Show reason nonlinear solve converged
#snes_error_if_not_converged = true ; Generate an error if nonlinear solve fails to converge
# PETSc summary -- useful for performance information.
#log_view = true

# End of file
